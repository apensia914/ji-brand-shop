# Generated by Django 2.2.5 on 2021-05-05 01:08

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('main_address', models.CharField(max_length=100, verbose_name='Main address')),
                ('sub_address', models.CharField(max_length=50, verbose_name='Sub address')),
                ('zipcode', models.IntegerField(max_length=8, verbose_name='Zip code')),
                ('phone_num', models.IntegerField(max_length=20, verbose_name='Phone number')),
                ('mobile_num', models.IntegerField(max_length=20, verbose_name='Mobile phone number')),
                ('bank_holder', models.CharField(max_length=10, verbose_name="Bank holder's name")),
                ('bank', models.CharField(choices=[('--은행선택--', '--은행선택--'), ('신한은행', '신한은행'), ('우리은행', '우리은행'), ('하나은행', '하나은행'), ('IBK기업은행', 'IBK기업은행'), ('KDB산업은행', 'KDB산업은행'), ('대구은행', '대구은행'), ('부산은행', '부산은행'), ('경남은행', '경남은행'), ('광주은행', '광주은행'), ('전북은행', '전북은행'), ('제주은행', '제주은행'), ('카카오뱅크', '카카오뱅크'), ('기타', '기타')], default='--은행선택--', max_length=10, verbose_name='Bank name')),
                ('bank_account_num', models.CharField(max_length=20, verbose_name='Bank account number')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
